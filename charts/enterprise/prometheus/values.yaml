image:
  repository: tccr.io/tccr/alpine
  pullPolicy: IfNotPresent
  tag: latest@sha256:12e0f84947ee7fc11f552e065a46d5a2b4e27cfc6ded0f624fc948c3138fb9a9

service:
  main:
    enabled: false
    ports:
      main:
        enabled: false

workload:
  main:
    enabled: false

portal:
  open:
    enabled: false

operator:
  register: true
  
kps:
  ## Deploy a Prometheus instance
  ##
  prometheus:
    enabled: true
  
    ## Toggle prometheus into agent mode
    ## Note many of features described below (e.g. rules, query, alerting, remote read, thanos) will not work in agent mode.
    ## ref: https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/designs/prometheus-agent.md
    ##
    agentMode: false
  
  
    ## Service account for Prometheuses to use.
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
    ##
    serviceAccount:
      create: true
  
    ## Settings affecting prometheusSpec
    ## ref: https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/api.md#prometheusspec
    ##
    prometheusSpec:
      ## If true, pass --storage.tsdb.max-block-duration=2h to prometheus. This is already done if using Thanos
      ##
      disableCompaction: false
  
      ## EnableAdminAPI enables Prometheus the administrative HTTP API which includes functionality such as deleting time series.
      ## This is disabled by default.
      ## ref: https://prometheus.io/docs/prometheus/latest/querying/api/#tsdb-admin-apis
      ##
      enableAdminAPI: false
  
      ## enable --web.enable-remote-write-receiver flag on prometheus-server
      ##
      enableRemoteWriteReceiver: false
  
  
      ## How long to retain metrics
      ##
      retention: 10d
  
      ## Maximum size of metrics
      ##
      retentionSize: ""
  
  
  
      ## Enable compression of the write-ahead log using Snappy.
      ##
      walCompression: true
  
      ## If true, the Operator won't process any Prometheus configuration changes
      ##
      paused: false
  
      ## Number of replicas of each shard to deploy for a Prometheus deployment.
      ## Number of replicas multiplied by shards is the total number of Pods created.
      ##
      replicas: 1
  
      ## Log level for Prometheus be configured in
      ##
      logLevel: info
  
      ## Log format for Prometheus be configured in
      ##
      logFormat: logfmt
  
  
      ## Enable/Disable Grafana dashboards provisioning for prometheus remote write feature
      remoteWriteDashboards: false
  
      ## Resource limits & requests
      ##
      resources: {}
      # requests:
      #   memory: 400Mi
  
      ## Prometheus StorageSpec for persistent data
      ## ref: https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/user-guides/storage.md
      ##
      storageSpec: {}
      ## Using PersistentVolumeClaim
      ##
      #  volumeClaimTemplate:
      #    spec:
      #      storageClassName: gluster
      #      accessModes: ["ReadWriteOnce"]
      #      resources:
      #        requests:
      #          storage: 50Gi
      #    selector: {}
  
  
      additionalScrapeConfigs: []
  
  ## Grafana is explicitly false, but we do create the datasource and dashboardobjects
  ## Explicitly disable Grafana, we ship this as a seperate chart
  ##
  grafana:
    enabled: false
  
    ## ForceDeployDatasources Create datasource configmap even if grafana deployment has been disabled
    ##
    forceDeployDatasources: false
  
    ## ForceDeployDashboard Create dashboard configmap even if grafana deployment has been disabled
    ##
    forceDeployDashboards: true
  
    ## Deploy default dashboards
    ##
    defaultDashboardsEnabled: true
  
    ## Timezone for the default dashboards
    ## Other options are: browser or a specific timezone, i.e. Europe/Luxembourg
    ##
    defaultDashboardsTimezone: utc
  
    ## Editable flag for the default dashboards
    ##
    defaultDashboardsEditable: true
  
  
  ## Create default rules for monitoring the cluster
  ##
  defaultRules:
    create: true
  
  
  ##
  global:
    rbac:
      create: true
  
  ## Configuration for prometheus-windows-exporter
  ## ref: https://github.com/prometheus-community/helm-charts/tree/main/charts/prometheus-windows-exporter
  ##
  prometheus-windows-exporter:
    ## Enable ServiceMonitor and set Kubernetes label to use as a job label
    ##
    prometheus:
      monitor:
        enabled: true
  
  ## Flag to disable all the kubernetes component scrapers
  ##
  kubernetesServiceMonitors:
    enabled: true
  
  ## Component scraping the kube api server
  ##
  kubeApiServer:
    enabled: true
  
  ## Component scraping the kubelet and kubelet-hosted cAdvisor
  ##
  kubelet:
    enabled: true
  
  
  ## Component scraping the kube controller manager
  ##
  kubeControllerManager:
    enabled: true
  
  ## Component scraping coreDns. Use either this or kubeDns
  ##
  coreDns:
    enabled: true
  
  ## Component scraping etcd
  ##
  kubeEtcd:
    enabled: true
  
  
  ## Component scraping kube scheduler
  ##
  kubeScheduler:
    enabled: true
  
  
  ## Component scraping kube proxy
  ##
  kubeProxy:
    enabled: true
  
  ## Component scraping kube state metrics
  ##
  kubeStateMetrics:
    enabled: true
  
  ## Deploy node exporter as a daemonset to all nodes
  ##
  nodeExporter:
    enabled: true
    operatingSystems:
      linux:
        enabled: true
      darwin:
        enabled: true
  
  
  ## Configuration for alertmanager
  ## Will re-introduce later
  ##
  alertmanager:
    ## Deploy alertmanager
    ##
    enabled: false
  
  
  ## Explicitly disable Prometheus-Operator, we ship this as a seperate chart
  ##
  prometheusOperator:
    enabled: false
  
  
  ## Configuration for thanosRuler
  ## ref: https://thanos.io/tip/components/rule.md/
  ##
  thanosRuler:
  
    ## Deploy thanosRuler
    ##
    enabled: false
  
  ## Install Prometheus Operator CRDs
  ##
  crds:
    enabled: false